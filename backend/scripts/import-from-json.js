import mongoose from 'mongoose';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
dotenv.config({ path: path.join(__dirname, '../.env') });

const ATLAS_URI = process.env.MONGODB_URI;

console.log('๐ฅ ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ูู ูููุงุช JSON ุฅูู MongoDB Atlas');
console.log('โ๏ธ Atlas URI:', ATLAS_URI.replace(/:[^:@]*@/, ':****@'));

async function importFromJSON(exportFolderName) {
  let connection;
  
  try {
    // ุงูุชุญูู ูู ูุฌูุฏ ุงูุชุตุฏูุฑ
    const exportDir = path.join(__dirname, '../exports');
    const exportPath = exportFolderName ? 
      path.join(exportDir, exportFolderName) : 
      findLatestExportFolder(exportDir);
    
    if (!fs.existsSync(exportPath)) {
      console.error(`โ ูุฌูุฏ ุงูุชุตุฏูุฑ ุบูุฑ ููุฌูุฏ: ${exportPath}`);
      console.log('\n๐ก ูู ุจุชุดุบูู export-data-to-json.js ุฃููุงู ูุชุตุฏูุฑ ุงูุจูุงูุงุช');
      process.exit(1);
    }
    
    console.log(`๐ ูุฌูุฏ ุงูุงุณุชูุฑุงุฏ: ${exportPath}`);
    
    // ูุฑุงุกุฉ ููุฎุต ุงูุชุตุฏูุฑ
    const summaryPath = path.join(exportPath, 'export-summary.json');
    let summary;
    if (fs.existsSync(summaryPath)) {
      summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
      console.log(`๐ ููุฎุต ุงูุชุตุฏูุฑ: ${summary.totalDocuments} ูุณุชูุฏ ูู ${summary.totalCollections} ูุฌููุนุฉ`);
      console.log(`๐ ุชุงุฑูุฎ ุงูุชุตุฏูุฑ: ${new Date(summary.exportDate).toLocaleString('ar-EG')}`);
    }
    
    // ุงูุงุชุตุงู ุจู MongoDB Atlas
    console.log('\nโณ ุงูุงุชุตุงู ุจู MongoDB Atlas...');
    connection = await mongoose.connect(ATLAS_URI, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000,
    });
    
    console.log('โ ุชู ุงูุงุชุตุงู ุจู Atlas ุจูุฌุงุญ!');
    
    const db = mongoose.connection.db;
    
    // ุงูุญุตูู ุนูู ูุงุฆูุฉ ูููุงุช JSON
    const jsonFiles = fs.readdirSync(exportPath).filter(file => file.endsWith('.json') && file !== 'export-summary.json');
    
    if (jsonFiles.length === 0) {
      console.error('โ ูุง ุชูุฌุฏ ูููุงุช JSON ููุงุณุชูุฑุงุฏ');
      process.exit(1);
    }
    
    console.log(`\n๐ฆ ุงูุนุซูุฑ ุนูู ${jsonFiles.length} ููู JSON ููุงุณุชูุฑุงุฏ`);
    console.log('โ'.repeat(60));
    
    let totalImported = 0;
    const importResults = {};
    
    // ุงุณุชูุฑุงุฏ ูู ููู JSON
    for (const fileName of jsonFiles) {
      const collectionName = fileName.replace('.json', '');
      const filePath = path.join(exportPath, fileName);
      
      try {
        console.log(`๐ฅ ${collectionName.padEnd(25)}: ุฌุงุฑู ุงูุงุณุชูุฑุงุฏ...`);
        
        // ูุฑุงุกุฉ ุงูุจูุงูุงุช ูู ุงูููู
        const fileContent = fs.readFileSync(filePath, 'utf8');
        let data;
        
        try {
          data = JSON.parse(fileContent);
        } catch (parseError) {
          console.error(`โ ${collectionName.padEnd(25)}: ุฎุทุฃ ูู ูุฑุงุกุฉ JSON`);
          importResults[collectionName] = 'ุฎุทุฃ ูู ุงููุฑุงุกุฉ';
          continue;
        }
        
        if (!Array.isArray(data) || data.length === 0) {
          console.log(`โช ${collectionName.padEnd(25)}: ูุง ุชูุฌุฏ ุจูุงูุงุช ููุงุณุชูุฑุงุฏ`);
          importResults[collectionName] = 0;
          continue;
        }
        
        const collection = db.collection(collectionName);
        
        // ุญุฐู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ (ุงุฎุชูุงุฑู)
        const existingCount = await collection.countDocuments();
        if (existingCount > 0) {
          console.log(`๐๏ธ ${collectionName.padEnd(25)}: ุญุฐู ${existingCount} ุนูุตุฑ ููุฌูุฏ...`);
          await collection.deleteMany({});
        }
        
        // ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ
        const result = await collection.insertMany(data, { ordered: false });
        
        console.log(`โ ${collectionName.padEnd(25)}: ุชู ุงุณุชูุฑุงุฏ ${result.insertedCount} ุนูุตุฑ`);
        
        totalImported += result.insertedCount;
        importResults[collectionName] = result.insertedCount;
        
      } catch (error) {
        console.error(`โ ${collectionName.padEnd(25)}: ุฎุทุฃ ูู ุงูุงุณุชูุฑุงุฏ - ${error.message}`);
        importResults[collectionName] = 'ุฎุทุฃ';
      }
    }
    
    console.log('โ'.repeat(60));
    console.log(`๐ ุฅุฌูุงูู ุงููุณุชูุฏุงุช ุงููุณุชูุฑุฏุฉ: ${totalImported}`);
    
    // ุงูุชุญูู ูู ุงููุชุงุฆุฌ
    console.log('\n๐ ุงูุชุญูู ูู ุงูุจูุงูุงุช ุงููุณุชูุฑุฏุฉ...');
    await verifyImportedData(db, Object.keys(importResults));
    
    // ุญูุธ ุชูุฑูุฑ ุงูุงุณุชูุฑุงุฏ
    const importReport = {
      importDate: new Date().toISOString(),
      sourceFolder: exportFolderName || path.basename(exportPath),
      totalImported,
      results: importResults,
      atlasURI: ATLAS_URI.replace(/:[^:@]*@/, ':****@')
    };
    
    const reportPath = path.join(exportPath, 'import-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(importReport, null, 2));
    
    console.log(`\n๐ ุชูุฑูุฑ ุงูุงุณุชูุฑุงุฏ ูุญููุธ ูู: import-report.json`);
    console.log('\n๐ ุชู ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ุจูุฌุงุญ ุฅูู MongoDB Atlas!');
    console.log('\nโจ ููููู ุงูุขู ุงุณุชุฎุฏุงู ุงูุชุทุจูู ูุน MongoDB Atlas');
    
  } catch (error) {
    console.error('\nโ ุฎุทุฃ ูู ุนูููุฉ ุงูุงุณุชูุฑุงุฏ:', error.message);
    process.exit(1);
  } finally {
    if (connection) {
      await mongoose.disconnect();
      console.log('\n๐ ุชู ูุทุน ุงูุงุชุตุงู');
    }
  }
}

function findLatestExportFolder(exportDir) {
  if (!fs.existsSync(exportDir)) {
    throw new Error('ูุฌูุฏ exports ุบูุฑ ููุฌูุฏ');
  }
  
  const folders = fs.readdirSync(exportDir)
    .filter(item => fs.statSync(path.join(exportDir, item)).isDirectory())
    .filter(folder => folder.startsWith('basma-export-'))
    .sort()
    .reverse();
  
  if (folders.length === 0) {
    throw new Error('ูุง ุชูุฌุฏ ูุฌูุฏุงุช ุชุตุฏูุฑ');
  }
  
  return path.join(exportDir, folders[0]);
}

async function verifyImportedData(db, collectionNames) {
  console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงูุจูุงูุงุช ูู MongoDB Atlas:');
  console.log('โ'.repeat(50));
  
  let totalDocuments = 0;
  
  for (const collectionName of collectionNames) {
    try {
      const collection = db.collection(collectionName);
      const count = await collection.countDocuments();
      console.log(`๐ ${collectionName.padEnd(25)}: ${count.toString().padStart(6)} ุนูุตุฑ`);
      totalDocuments += count;
    } catch (error) {
      console.log(`๐ ${collectionName.padEnd(25)}: ${' ERROR'.padStart(6)}`);
    }
  }
  
  console.log('โ'.repeat(50));
  console.log(`๐ ุฅุฌูุงูู ุงููุณุชูุฏุงุช: ${totalDocuments}`);
  
  // ุงุฎุชุจุงุฑ ุงูุงุณุชุนูุงูุงุช ุงูุฃุณุงุณูุฉ
  console.log('\n๐งช ุงุฎุชุจุงุฑ ุงูุงุณุชุนูุงูุงุช ุงูุฃุณุงุณูุฉ...');
  
  try {
    // ุงุฎุชุจุงุฑ ุจุนุถ ุงููุฌููุนุงุช ุงููููุฉ
    const tests = [
      { name: 'users', field: 'email' },
      { name: 'services', field: 'title' },
      { name: 'settings', field: 'key' }
    ];
    
    for (const test of tests) {
      try {
        const collection = db.collection(test.name);
        const count = await collection.countDocuments();
        
        if (count > 0) {
          const sample = await collection.findOne({});
          const identifier = sample[test.field] || sample._id || 'ุบูุฑ ูุญุฏุฏ';
          console.log(`โ ${test.name}: ${count} ุนูุตุฑ (ุนููุฉ: ${identifier})`);
        } else {
          console.log(`โช ${test.name}: ูุง ุชูุฌุฏ ุจูุงูุงุช`);
        }
      } catch (error) {
        console.log(`โ ${test.name}: ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ`);
      }
    }
    
    console.log('\n๐ฏ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ุงูุชููุช!');
    
  } catch (error) {
    console.error('โ ูุดู ูู ุงุฎุชุจุงุฑ ุงูุงุณุชุนูุงูุงุช:', error.message);
  }
}

// ุงูุญุตูู ุนูู ุงุณู ูุฌูุฏ ุงูุชุตุฏูุฑ ูู ุงููุนุงููุงุช
const exportFolderName = process.argv[2];

if (exportFolderName) {
  console.log(`๐ ุงุณุชุฎุฏุงู ูุฌูุฏ ุงูุชุตุฏูุฑ ุงููุญุฏุฏ: ${exportFolderName}`);
} else {
  console.log('๐ ุงูุจุญุซ ุนู ุฃุญุฏุซ ูุฌูุฏ ุชุตุฏูุฑ...');
}

// ุชุดุบูู ุงูุงุณุชูุฑุงุฏ
importFromJSON(exportFolderName);
