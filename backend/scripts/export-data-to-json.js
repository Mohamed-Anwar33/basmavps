import mongoose from 'mongoose';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// MongoDB URI ุงููุญูู
const LOCAL_URI = 'mongodb://127.0.0.1:27017/basma_db?directConnection=true&serverSelectionTimeoutMS=2000';

// ุงููุฌููุนุงุช ุงูุชู ุชุญุชูู ุนูู ุจูุงูุงุช (ุญุณุจ ุงููุญุต ุงูุฃุฎูุฑ)
const COLLECTIONS_WITH_DATA = [
  'users',           // 1 ุนูุตุฑ
  'services',        // 26 ุนูุตุฑ  
  'orders',          // 2 ุนูุตุฑ
  'payments',        // 2 ุนูุตุฑ
  'blogs',           // 4 ุนูุตุฑ
  'faqs',            // 7 ุนูุตุฑ
  'settings',        // 116 ุนูุตุฑ
  'pagecontents',    // 7 ุนูุตุฑ
  'banners',         // 7 ุนูุตุฑ
  'admins',          // 3 ุนูุตุฑ
  'auditlogs',       // 2539 ุนูุตุฑ
  'contactpagecontents', // 1 ุนูุตุฑ
  'contentversions', // 42 ุนูุตุฑ
  'homepageSections' // 3 ุนูุตุฑ
];

console.log('๐ฆ ุชุตุฏูุฑ ุงูุจูุงูุงุช ูู MongoDB ุงููุญูู ุฅูู ูููุงุช JSON');
console.log('๐ Local URI:', LOCAL_URI);

async function exportToJSON() {
  let connection;
  
  try {
    // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุญููุฉ
    console.log('\nโณ ุงูุงุชุตุงู ุจู MongoDB ุงููุญูู...');
    connection = await mongoose.connect(LOCAL_URI, {
      serverSelectionTimeoutMS: 5000,
    });
    
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ!');
    
    const db = mongoose.connection.db;
    
    // ุฅูุดุงุก ูุฌูุฏ ููุชุตุฏูุฑ
    const exportDir = path.join(__dirname, '../exports');
    if (!fs.existsSync(exportDir)) {
      fs.mkdirSync(exportDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const exportFolderName = `basma-export-${timestamp}`;
    const exportPath = path.join(exportDir, exportFolderName);
    fs.mkdirSync(exportPath, { recursive: true });
    
    console.log(`๐ ูุฌูุฏ ุงูุชุตุฏูุฑ: ${exportPath}`);
    
    console.log('\n๐ ุชุตุฏูุฑ ุงูุจูุงูุงุช...');
    console.log('โ'.repeat(60));
    
    let totalExported = 0;
    const exportSummary = {};
    
    // ุชุตุฏูุฑ ูู ูุฌููุนุฉ ุฅูู ููู JSON ูููุตู
    for (const collectionName of COLLECTIONS_WITH_DATA) {
      try {
        const collection = db.collection(collectionName);
        const count = await collection.countDocuments();
        
        if (count === 0) {
          console.log(`โช ${collectionName.padEnd(25)}: ูุง ุชูุฌุฏ ุจูุงูุงุช`);
          exportSummary[collectionName] = 0;
          continue;
        }
        
        console.log(`๐ฆ ${collectionName.padEnd(25)}: ุฌุงุฑู ุชุตุฏูุฑ ${count} ุนูุตุฑ...`);
        
        const data = await collection.find({}).toArray();
        const fileName = `${collectionName}.json`;
        const filePath = path.join(exportPath, fileName);
        
        // ูุชุงุจุฉ ุงูุจูุงูุงุช ุฅูู ููู JSON
        fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
        
        console.log(`โ ${collectionName.padEnd(25)}: ุชู ุญูุธ ${data.length} ุนูุตุฑ ูู ${fileName}`);
        
        totalExported += data.length;
        exportSummary[collectionName] = data.length;
        
      } catch (error) {
        console.error(`โ ${collectionName}: ุฎุทุฃ ูู ุงูุชุตุฏูุฑ -`, error.message);
        exportSummary[collectionName] = 'ุฎุทุฃ';
      }
    }
    
    // ุฅูุดุงุก ููู ุงูููุฎุต
    const summaryPath = path.join(exportPath, 'export-summary.json');
    const summary = {
      exportDate: new Date().toISOString(),
      totalCollections: COLLECTIONS_WITH_DATA.length,
      totalDocuments: totalExported,
      collections: exportSummary,
      note: 'Use import-from-json.js to import these files to MongoDB Atlas'
    };
    
    fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2));
    
    // ุฅูุดุงุก ุฏููู ุงูุงุณุชูุฑุงุฏ
    const importGuide = `
# ุฏููู ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ุฅูู MongoDB Atlas

## ุงููููุงุช ุงูููุตุฏุฑุฉ:
${COLLECTIONS_WITH_DATA.map(name => `- ${name}.json (${exportSummary[name]} ุนูุตุฑ)`).join('\n')}

## ุทุฑููุฉ ุงูุงุณุชูุฑุงุฏ:

### ุงูุทุฑููุฉ 1: ุงุณุชุฎุฏุงู ุงูุณูุฑููพุช ุงูุขูู
\`\`\`bash
node scripts/import-from-json.js "${exportFolderName}"
\`\`\`

### ุงูุทุฑููุฉ 2: ุงุณุชุฎุฏุงู MongoDB Compass
1. ุงุชุตู ุจู MongoDB Atlas
2. ููู ููู JSON:
   - ุงุฎุชุฑ ุงููุฌููุนุฉ ุฃู ุฃูุดุฆูุง
   - ุงุถุบุท Import Data
   - ุงุฎุชุฑ ุงูููู JSON
   - ุงุถุบุท Import

### ุงูุทุฑููุฉ 3: ุงุณุชุฎุฏุงู mongoimport (ุฅุฐุง ูุงูุช ุฃุฏูุงุช MongoDB ูุซุจุชุฉ)
\`\`\`bash
mongoimport --uri "mongodb+srv://basmatdesign:basma1234@cluster0.0wetdkc.mongodb.net/basma_db" --collection users --file users.json --jsonArray
mongoimport --uri "mongodb+srv://basmatdesign:basma1234@cluster0.0wetdkc.mongodb.net/basma_db" --collection services --file services.json --jsonArray
# ูุฑุฑ ููู ูุฌููุนุฉ...
\`\`\`

## ุงูุชุญูู ูู ุงูููู:
\`\`\`bash
node scripts/verify-atlas-data.js
\`\`\`

ุชุงุฑูุฎ ุงูุชุตุฏูุฑ: ${new Date().toLocaleString('ar-EG')}
ุฅุฌูุงูู ุงููุณุชูุฏุงุช: ${totalExported}
`;
    
    const guidePath = path.join(exportPath, 'README.md');
    fs.writeFileSync(guidePath, importGuide);
    
    console.log('โ'.repeat(60));
    console.log(`๐ ุฅุฌูุงูู ุงููุณุชูุฏุงุช ุงูููุตุฏุฑุฉ: ${totalExported}`);
    console.log(`๐ ูุฌูุฏ ุงูุชุตุฏูุฑ: ${exportPath}`);
    console.log(`๐ ููุฎุต ุงูุชุตุฏูุฑ: export-summary.json`);
    console.log(`๐ ุฏููู ุงูุงุณุชูุฑุงุฏ: README.md`);
    
    console.log('\n๐ ุชู ุชุตุฏูุฑ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    console.log('\n๐ ุงูุฎุทูุงุช ุงูุชุงููุฉ:');
    console.log('1. ุงุณุชุฎุฏู ุณูุฑููพุช import-from-json.js ููุงุณุชูุฑุงุฏ ุงูุขูู');
    console.log('2. ุฃู ุงุณุชุฎุฏู MongoDB Compass ููุงุณุชูุฑุงุฏ ุงููุฏูู');
    console.log('3. ุฃู ุงุณุชุฎุฏู mongoimport ุฅุฐุง ูุงูุช ุฃุฏูุงุช MongoDB ูุซุจุชุฉ');
    
  } catch (error) {
    if (error.message.includes('ECONNREFUSED')) {
      console.error('\nโ ูุง ูููู ุงูุงุชุตุงู ุจู MongoDB ุงููุญูู');
      console.error('๐ก ุชุฃูุฏ ูู ุฃู MongoDB ูุนูู ูุญููุงู ุนูู ุงููููุฐ 27017');
    } else {
      console.error('\nโ ุฎุทุฃ ูู ุงูุชุตุฏูุฑ:', error.message);
    }
    process.exit(1);
  } finally {
    if (connection) {
      await mongoose.disconnect();
      console.log('\n๐ ุชู ูุทุน ุงูุงุชุตุงู');
    }
  }
}

// ุชุดุบูู ุงูุชุตุฏูุฑ
exportToJSON();
